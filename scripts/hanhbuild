#!/bin/sh
version=2.0

print_help() {
echo "hanhbuild - Hanh Linux packages builder"
echo "Usage: hanhbuild [Action] [Options]"
echo "Action:"
echo "-h                           Print this message"
echo "-v                           Print version"
echo "-g                           Generate database file"
echo "-F                           Fetch package(s) build file(s)"
echo "-b                           Build packages"
echo "-gf                          See all available flags from a build file"
echo "Options:"
echo "-s=<path>                    Root directory <overwrite \$SYSROOT>"
echo "-bf=<path>                   Build file"
echo "Options <for build action only>:"
echo "-d                           Do not check dependencies"
echo "-c                           Clean build"
echo "-f                           Force"
echo "-bd                          Build dependencies"
echo "-t=[unpack,compile,mkpkg]    Build tasks"
echo "For any questions, please consider asking on GitHub: https://github.com/hanh-linux/pachanh"
exit 0
}
err() {
echo "ERROR: $*"
}

die() {
err "$*"
exit 1
}

fetch() {
eval "$DOWNLOADER $*"
}

fetch_pkg() {
cwd=$(pwd)
if test -z "$repo"; then
	repo="$(ls $MIRRORDIR)"
fi

for x in $*; do
	for y in $repo; do
		for z in $(cat "$MIRRORDIR/$y"); do
			fetch $z/$x/buildhanh
			if test -f buildhanh; then 
				mkdir -p "$x"
				mv buildhanh "$x"/buildhanh
				cd "$x"
				. "$(pwd)/buildhanh"
				for t in $attach; do 
					fetch $z/$x/$t
				done
				cd $cwd
				break 
			fi
		done
		if test -f "$x"/buildhanh; then
			break
		fi
	done
done
}

check_deps() {
if test -n "$*"; then
	for dep in $*; do
		if ! test -d $SYSROOT/var/lib/pachanh/system/$dep; then
			if test -z "$builddeps"; then
				die "Dependency $dep not found"
			else
				cd "$hanhdir"/deps
				hanhbuild -F "$dep"
				cd "$dep"
				hanhbuild -b -bd
				pachanh -i $dep*.hanhpkg.tar.xz
				cd "$hanhdir"
			fi
		fi
	done
fi
}

check_files() {
for x in $*; do
	if ! test -f "$hanhdir"/"$x"; then 
		die "$x not found!"
	fi
done
}

check_contain() {
cd $pkgdir/var/lib/pachanh/system
for x in $*; do
	ln -sf "$name" "$x" 
done
cd $pkgdir
}

check_config() {
for x in $*; do 
	mv "$pkgdir"/"$x" "$pkgdir"/"$x".newfile
done
}

get_flag() {
if test -z "$buildfile"; then
	buildfile="$(pwd)/buildhanh"
fi
. "$buildfile" || die "Cannot get build information from $buildfile"
echo "Build flavor are: $buildFlavor"
echo "Build flags are: $buildFlags"
}

gen_db() {
. $buildfile || die
echo "$name-$ver" > data
echo "$desc" >> data
}

gen_info() {
info="${1}"
echo "Name: $name" >> "$info"
echo "Version: $ver" >> "$info"
echo "Description: $desc" >> "$info"
echo "Depends: $depends" >> "$info"
echo "Contain: $contain" >> "$info" 
echo "Homepage: $home" >> "$info"
echo "License: $license" >> "$info"
}

gen_filelist() {
FILELIST="${1}"
cd "${pkgdir}"
find * | tee "$FILELIST" > /dev/null 2>&1
}

gen_header() {
HEADER="${1}"
echo "name=\"$name\"" >> "$HEADER"
echo "version=\"$ver\"" >> "$HEADER"
echo "desc=\"$desc\"" >> "$HEADER"
echo "depends=\"$depends\"" >> "$HEADER"
echo "contain=\"$contain\"" >> "$HEADER"
echo "config=\"$config\"" >> "$HEADER"
echo "pkg_infodir=\"var/lib/pachanh/system/$name\"" >> "$HEADER"
}

ask() {
cwd=$(pwd)
read -r package
pkg=$(echo $package | cut -d " " -f 1)
for x in $*; do
	if test "$pkg" = "$x"; then
		found=1
		mkdir -p asked
		cd asked
		if test "$pkg" != "$name"; then
			fetch_pkg $pkg
			cd $pkg
			hanhbuild -b $misc || exit 1
		else
			echo "Building the package with the same name"
			hanhbuild -bf=$hanhdir/buildhanh.$name -b $misc || exit 1
		fi

		mv *hanhpkg* $cwd
		cd $cwd

	fi
done

if test -z $found; then
	echo "Package name $package not found! Re-enter again"
	ask $*
fi
}

ask_pkg() {
echo "Available packages are: $*"
echo "Please enter one below"
ask $*
}

define_ask() {
ver=9999
desc="Ask for $name providers"
task="pkgask"
}

build() {
export $USE_FLAGS
. "$buildfile" || die "Cannot get information from $buildfile"

if test -n "$Task"; then
	task="$Task"
fi

tarball="$name"-"$ver".hanhpkg.tar.xz

if test -f "$hanhdir"/"$tarball"; then 
	if test -z "$force"; then 
		die "Package built"
	fi
fi

if test -n "$clean"; then
	rm -rf "$pkgdir" "$workdir" "$hanhdir"/.buildinfo "$hanhdir"/"$tarball" "$hanhdir"/deps
fi

rm -rf "$pkgdir"
mkdir -p "$pkgdir" "$workdir"
echo $hanhdir

if test -f "$hanhdir"/.buildinfo; then 	
	. "$hanhdir"/.buildinfo || die "Failed to run .buildinfo"
fi

if test -z "$task"; then
	task="unpack compile mkpkg" 
fi

if test -z "$nodeps"; then	
	echo "Checking deps..."
	mkdir -p $hanhdir/deps
	check_deps $depends
	check_deps $mkdeps
fi

echo "Fetching sources..."
for url in $sources; do
	fetch $url
done

check_files $files 

for func in $task; do 
	unset run_compile
	echo "Running function $func..."
	if test "$func" = "compile"; then
		run_compile=1
		if test -n "$flavor"; then
			for flv in $flavor; do 
				if test -n "$(type compile_$flv | grep function)"; then
					echo "Using flavor $flv to build."
					use_flavor=1
					eval compile_$flv || die "Failed to run function compile_$flv"
					break
				fi
			done
			if test -z $use_flavor; then 
				echo "No specfied build flavor found! Using compile by default..."
				eval compile || die "Failed to run function compile"
			fi
		else
			eval compile || die "Failed to run function compile"
		fi
	fi

	if test -z $run_compile; then 
		eval "$func" || die "Failed to run function $func"
	fi

	if test "$func" = "mkpkg"; then
		repack=1;
	fi
done

if test -n "$repack"; then
	cd $pkgdir
	infodir=$pkgdir/var/lib/pachanh/system/"$name"
	mkdir -p "$infodir"

	check_contain $contain
	check_config  $config
	
	touch "$infodir"/filelist
	gen_info "$infodir"/info
	gen_header "$pkgdir"/pre-install
	gen_header "$infodir"/header
	gen_filelist "$infodir"/filelist
	
	cd "$pkgdir"
	tar -cJf "$hanhdir"/"$tarball" *	
	echo "Package $tarball created."
fi
} 

. CONFDIR/hanh.conf || die "Cannot get information from configuration file."

for arg in $*; do
	case $arg in 
		-h) print_help;;
		-v) echo "$version";exit;;
		-b) action=build;;
		-F) action=fetch_pkg;;
		-g) action=gen_db;;
		-gf) action=get_flag;;
		-d) nodeps=1;;
		-f) force=1;;
		-c) clean=1;;
		-bd) builddeps=1;;
		-s=*) SYSROOT="$(echo $arg | cut -d "=" -f 2)";;
		-bf=*) buildfile="$(echo $arg | cut -d "=" -f 2)";;
		-t=*) Task="$(echo $arg | cut -d "=" -f 2 | sed 's/,/ /g')";;
		-fl=*) flag="$(echo $arg | cut -d "=" -f 2)";;
		*) misc="$misc $arg";;
	esac
done

if test -z "$buildfile"; then
	buildfile="$hanhdir/buildhanh"
fi

$action $misc
