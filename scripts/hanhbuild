#!/bin/sh
version=2.0
remote=/var/lib/pachanh/remote
system=/var/lib/pachanh/system
hanhdir=$(pwd)

print_help() {
echo "hanhbuild - Hanh Linux tool for generating packages stuff"
echo ""
echo "Usage: hanhbuild [Action] [Options]"
echo "Action:"
echo "-h                           Print this message"
echo "-v                           Print version"
echo "-g                           Create database archive of all packages in current directory"
echo "-F                           Fetch package(s) build file(s)"
echo "-b                           Build packages"
echo "-gf                          See all available flags from a build file"
echo "-gn                          Get package name in format \$name-\$ver.hanhpkg.tar.xz"
echo "Options:"
echo "-R=<path>                    Root directory <overwrite \$sysroot>"
echo "-bf=<path>                   Build file"
echo "-a<var>=<val>                Append needed variable to build file (*)" 
echo "Options <for build action only>:"
echo "-d                           Do not check dependencies"
echo "-c                           Clean build"
echo "-f                           Force"
echo "-bd                          Build dependencies"
echo "-t=[unpack,compile,mkpkg]    Build tasks"
echo "-i                           Install packages after build (skip compile if package found)"
echo "-s                           Compare system package version"
echo "-I                           Ignore error (if package not found)"
echo "-S                           Enable stage tarball mode"
echo "-ir=<path>                   Path to stage root directory"
echo "Options <for database only>:"
echo "-r=<name>                    Repository name"
echo "-H=<path>                    Hook script"
echo "Variable: "
echo "buildroot=<path>             Root for checking dependencies in stage building"
echo "optarg=<arg>                 Optional arguements for package installation"
echo "Please ensure that all paths do not have any special characters and space"
echo "(*): Please use ':' instead of ' ' for separating variable value"
exit 0
}

err() {
echo "ERROR: $*"
}

die() {
err "$*"
exit 1
}

parse_srcargs() {
unset localname remotetype remoteurl gitcommit
localname="$1"
remotetype="$2"
remoteurl="$3"
gitcommit="$4"
}

fetch() {
eval "$downloader $1 $2" || die "Failed to fetch source"
}

fetch_sources() {
for src in $*; do 
	srcargs="$(echo $src | sed "s/::/ /g")"
	parse_srcargs $srcargs
	case "$localname" in
		http* | ftp* ) 
			remotetype=file;
			remoteurl="$localname";
			localname="$(basename $localname)";;
	esac
	if ! test -f "$localname" && ! test -d "$localname"; then
		if test -z $remotetype; then 
			die "$localname not found!"
		else
			if test -z "$remoteurl"; then 
				die "Remote type specified but remote source not found!"
			fi
			case $remotetype in
				file ) 
					fetch $hanhdir/$localname $remoteurl || die "Failed to fetch source (file: $localname)";;
				git  ) 
					git clone $remoteurl $workdir/$localname || die "Failed to fetch source (git: $localname)";
					rm -rf $hanhdir/$localname/.git;;
				commit ) 
					git clone $remoteurl $workdir/$localname || die "Failed to fetch source (git commit: $localname)";
					cd $workdir/$localname
					git checkout $gitcommit;
					rm -rf .git/;
					cd $hanhdir;;
			esac
		fi
	fi

	# Support XZ, GZIP, BZIP2 and ZSTD format
	case $localname in
		*.tar.gz|*.tgz|*.tar.bz2|*.tbz2|*.tar.xz|*.txz) 
			tar -C $workdir -xf $hanhdir/$localname;;
		*.zst ) 
			zstd --output-dir-flat $workdir -d $hanhdir/$localname
	esac
done
}

fetch_pkg() {
cwd=$(pwd)
if test -z "$repo"; then
	die "Empty repo"
fi

for x in $*; do
	unset fetched found
	if ! test -f $cwd/$x/buildhanh; then 
		for y in $repo; do
			if test -d $sysroot/$remote/$y/$x; then
				found=1
				for z in $(cat "$mirror/$y"); do
						fetch buildhanh $z/$x/buildhanh
						if test -f "$cwd/buildhanh"; then
							fetched=1
							mkdir -p $cwd/$x
							mv buildhanh $cwd/$x
							cd $cwd/$x
							. "$(pwd)/buildhanh"
							for t in $attach; do 
								fetch $t $z/$x/$t
							done
							cd $cwd
							break
						fi	
				done
			fi
		done
	else
		echo Found local build file! Remove it to fetch from remote.
		found=1
	fi
	if test -z $found; then 
		if test -z "$ignore"; then 
			die "Cannot find specified package ($x)"
		fi
	fi

done
}

compare_sysver() {
unset same version
echo $sysroot/$system/$name/info
if test -f $sysroot/$system/$name/info; then
	version=$(grep version $sysroot/$system/$name/$info | cut -d "=" -f 2 | sed 's/"//g')	

	if test "$ver" == "$version"; then 
		same=y
	fi
fi
}

check_deps() {
if test -z "$buildroot"; then
	buildroot="$sysroot"
fi

if test -n "$*"; then
	for dep in $*; do
		if ! test -d $buildroot/$system/$dep; then
			if test -z "$builddeps"; then
				die "Dependency $dep not found"
			else
				cd "$hanhdir"/deps
				hanhbuild -F "$dep" || die "Dependencies not found in remote"
				cd "$dep"
				hanhbuild -b -bd -i || die "Failed to build dependencies"
				cd "$hanhdir"
			fi
		fi
	done
fi
}

check_mkdeps() {
if test -n "$*"; then
	for dep in $*; do
		if ! test -d $sysroot/$system/$dep; then
			if test -z "$builddeps"; then
				die "Dependency $dep not found"
			else
				cd "$hanhdir"/deps
				hanhbuild -F "$dep" || die "Dependencies not found in remote"
				cd "$dep"
				hanhbuild -b -bd -i || die "Failed to build dependencies"
				cd "$hanhdir"
			fi
		fi
	done
fi

}

get_tarball() {
. "$buildfile" || die "Cannot get build information from $buildfile"
echo $name-$ver.hanhpkg.tar.xz
}

get_flag() {
. "$buildfile" || die "Cannot get build information from $buildfile"
echo "Build flavor are: $buildFlavor"
echo "Build flags are: $buildFlags"
}

get_info() {
echo $name-$ver.hanhpkg.tar.xz
}

gen_db() {
. $buildfile || die
echo "$name-$ver" > data
echo "$desc" >> data

if test -n "$binary"; then
	echo "$tarball" > release
fi
}

gen_archive() {
cwd=$(pwd)
test -z $dbrepo && die "Empty database repository name"
if test "$dbrepo" != "$(basename $dbrepo)"; then 
	echo "WARNING: database archive will be placed in $cwd/$(basename $dbrepo).database"
	dbrepo=$(basename $dbrepo) 
fi 

rm -rf $dbrepo && mkdir $dbrepo
for pkg in $(ls); do  
	if test "$pkg" != "$dbrepo"; then  
		mkdir $cwd/$dbrepo/$pkg
		cd $cwd/$pkg
		buildfile=$cwd/$pkg/buildhanh gen_db
		mv data $cwd/$dbrepo/$pkg/ 
		cd ..
	fi
done

cd $dbrepo 
install -Dm755 $repohook .
tar -cJf $cwd/$dbrepo.database *
echo "Generated database information successfully: $dbrepo.database"
}

setopts() {
for opt in $*; do
	optname=${opt#NO_}
	case $opt in
		NO_* ) buildopts="${buildopts#$optname}" ;;
		*)     buildopts="$buildopts $optname"   ;;
	esac
done
}

ask() {
cwd=$(pwd)
read -r package
pkg=$(echo $package | cut -d " " -f 1)
for x in $*; do
	if test "$pkg" = "$x"; then
		found=1
		mkdir -p asked
		cd asked
		if test "$pkg" != "$name"; then
			fetch_pkg $pkg
			cd $pkg
			hanhbuild -b $misc || exit 1
		else
			echo "Building the package with the same name"
			hanhbuild -bf=$hanhdir/buildhanh.$name -b $misc || exit 1
		fi

		mv *hanhpkg* $cwd
		cd $cwd

	fi
done

if test -z $found; then
	echo "Package name $package not found! Re-enter again"
	ask $*
fi
}

ask_pkg() {
echo "Available packages are: $*"
echo "Please enter one below"
ask $*
}

define_ask() {
ver=9999
desc="Ask for $name providers"
task="pkgask"
}

append_compileflags() {
touch $hanhdir/.temp-buildhanh || die Failed to create temporary file
for cfl in $*; do
	cfl=${cfl#-a}
	flag_var="$(echo $cfl | cut -d '=' -f 1)"
	flag_val="$(echo ${cfl#$flag_var=} | sed 's/:/ /')"
	echo $flag_var=\"\$$flag_var $flag_val\" >> $hanhdir/.temp-buildhanh
done
cat "$hanhdir/buildhanh" >> $hanhdir/.temp-buildhanh
mv $hanhdir/.temp-buildhanh $hanhdir/buildhanh
}

build() {
if test -n "$stagemode"; then
	buildopts="stage $buildopts"
fi

for bo in $buildopts; do
	if ! test -f CONFDIR/hanh.d/profile/$bo; then 
		die "Cannot find specified option ($bo)"
	else 
		. CONFDIR/hanh.d/profile/$bo || die "Failed to use $bo build profile"
	fi
done

test -n "$USE_FLAGS" && export $USE_FLAGS
. "$buildfile" || die "Cannot get information from $buildfile"

if test -n "$Task"; then
	task="$Task"
fi

cd $hanhdir

if test -n "$syscompare"; then 
	compare_sysver $name 
	if test -n "$same"; then 
		echo "$name is up-to-date."
		exit 
	fi
fi

tarball=$name-$ver.hanhpkg.tar.xz

if test -f "$hanhdir/$tarball" ; then 
	if test -z "$force"; then 
		# This won't be listed as error 
		echo "WARNING: Package built."
		test -z $install && exit 0
	else 
		install_later=$install
		unset install
	fi

	if test -n "$install"; then
		hanh $optarg -i "$hanhdir"/"$tarball"
		exit 0
	fi
fi

if test -n "$clean"; then
	rm -rf "$pkgdir" "$workdir" "$hanhdir"/.buildinfo "$hanhdir/$tarball" "$hanhdir"/deps
fi

rm -rf "$pkgdir"
mkdir -p "$pkgdir" "$workdir"

if test -f "$hanhdir"/.buildinfo; then 	
	. "$hanhdir"/.buildinfo || die "Failed to run .buildinfo"
fi

if test -z "$task"; then
	task="unpack compile mkpkg" 
fi

if test -z "$nodeps"; then	
	echo "Checking deps..."
	mkdir -p $hanhdir/deps
	check_deps $depends
	check_mkdeps $mkdeps
fi

echo "Checking sources..."
fetch_sources $sources || die "Failed to get information of sources"

for func in $task; do 
	echo "Running function $func"
	if test "$func" == mkpkg; then 
		for _t in $mkpkg_task; do
			$_t || die "Failed to run mkpkg_task" 
		done
		GEN=1 \
		pkgdir=$pkgdir \
		hanhdir=$hanhdir \
		workdir=$workdir \
		fakeroot genpkg "$buildfile" installpkg || die "Failed to install package"
	else
		eval $func || die Failed to run function $compile
	fi

	if test "$func" == "mkpkg"; then 
		repack=1
	fi
done

if test -n "$repack"; then
	GEN=1 \
		pkgdir=$pkgdir \
		hanhdir=$hanhdir \
		workdir=$workdir \
		fakeroot genpkg "$buildfile" geninfo || die "Failed to generate package information"

	cd "$pkgdir"
	tar -cJ * -f "$hanhdir"/"$tarball"
	echo "Build successfully: $tarball"
	
	if test -z "$install"; then 
		install=$install_later
	fi

	if test -n "$install"; then 
		hanh $optargs -i $hanhdir/$tarball
	fi
fi
unset install_later install
}

. CONFDIR/hanhbuild.conf || die "Cannot get information from configuration file."

for arg in $*; do
	case $arg in 
		-h) print_help;;
		-v) echo "$version";exit;;
		-d) export nodeps=1;;
		-f) export force=1;;
		-c) export clean=1;;
		-i) export install=1;;
		-s) export syscompare=1;;
		-bd) export builddeps=1;;
		-S) export stagemode=1;;
		-R=*) export sysroot="$(echo $arg | cut -d "=" -f 2)";;
		-bf=*) export buildfile="$(echo $arg | cut -d "=" -f 2)";;
		-t=*) export Task="$(echo $arg | cut -d "=" -f 2 | sed 's/,/ /g')";;
		-fl=*) export flag="$(echo $arg | cut -d "=" -f 2)";;
		-ir=*) export installRoot=$(echo $arg | cut -d "=" -f 2);;
		-r=*) export dbrepo="$(echo $arg | cut -d "=" -f 2)";;
		-H=*) export repohook="$(echo $arg | cut -d "=" -f 2)";;
		-a*) compile_flags="$compile_flags $arg";;
		-b) action=build;;
		-F) action=fetch_pkg;;
		-g) action=gen_archive;;
		-gf) action=get_flag;;
		-gt) action=get_tarball;;
		-gn) action=get_info;;
		*) misc="$misc $arg";;
	esac
done

if test "$nodeps" == 1 && "$builddeps" == 1; then
	echo "WARNING: Overwrites build dependencies to no because no dependencies build set"
	unset builddeps
fi

if test -z "$buildfile"; then
	buildfile="$hanhdir/buildhanh"
fi

if test -n "$compile_flags"; then
	append_compileflags $compile_flags
fi

$action $misc
